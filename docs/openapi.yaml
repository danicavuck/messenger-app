openapi: 3.0.3
info:
  title: Chat Messenger API
  version: 1.0.0
  description: |
    REST API for the Chat Messenger application with JWT authentication and token refresh flow.

servers:
  - url: http://localhost:8080
    description: Local development server

paths:
  /api/v1/auth/register:
    post:
      summary: Register a new user
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password, username]
              properties:
                email:
                  type: string
                  format: email
                  example: demo@example.com
                username:
                  type: string
                  example: demo
                password:
                  type: string
                  format: password
                  example: demo1234
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Validation error or user already exists

  /api/v1/auth/login:
    post:
      summary: Authenticate user and return JWT tokens
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  example: demo@example.com
                password:
                  type: string
                  example: demo1234
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: Short-lived JWT access token
                  refresh_token:
                    type: string
                    description: Long-lived JWT refresh token
                  user:
                    type: object
                    properties:
                      email:
                        type: string
                        example: demo@example.com
                      username:
                        type: string
                        example: demo
                      roles:
                        type: array
                        items:
                          type: string
                          example: ROLE_USER
        '401':
          description: Invalid credentials

  /api/v1/auth/refresh:
    post:
      summary: Refresh access token using a valid refresh token
      description: |
        Requires a valid **access token** in the `Authorization` header (auto-filled from Swagger UI “Authorize” button)
        and a **refresh token** in the request body.
      tags: [Authentication]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [refresh_token]
              properties:
                refresh_token:
                  type: string
                  description: Refresh JWT token
                  example: eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9...
      responses:
        '200':
          description: New access and refresh tokens issued
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: New JWT access token
                  refresh_token:
                    type: string
                    description: New JWT refresh token
        '400':
          description: Invalid or expired refresh token
        '401':
          description: Unauthorized (invalid access token)

  /api/v1/messages:
    get:
      summary: Get all messages
      tags: [Messages]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of messages
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    message:
                      type: string
                      example: Hello world
                    user:
                      type: string
                      example: demo@example.com
                    timestamp:
                      type: string
                      format: date-time
                      example: 2025-10-19T15:42:00Z

  /api/v1/message:
    post:
      summary: Send a new message
      tags: [Messages]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [message]
              properties:
                message:
                  type: string
                  example: Hello world
      responses:
        '200':
          description: Message sent successfully
        '400':
          description: Bad request, invalid input

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
