services:
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: messenger-backend
    env_file:
      - ./backend/.env
    volumes:
      - ./backend:/var/www/html:cached
      - ./backend/config/jwt:/var/www/html/config/jwt
    environment:
      LOCAL_USER_UID: ${LOCAL_USER_UID:-1000}
      LOCAL_GROUP_GID: ${LOCAL_GROUP_GID:-1000}
    ports:
      - "${SERVER_PORT:-8080}:80"
    depends_on:
      postgres:
        condition: service_healthy
      messenger-mercure:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - app-network
    restart: unless-stopped

  postgres:
    image: postgres:17-alpine
    container_name: messenger-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: messenger_db
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d messenger_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  messenger-mercure:
    image: dunglas/mercure
    container_name: messenger-mercure
    restart: unless-stopped
    ports:
      - "3000:80"
    environment:
      MERCURE_PUBLISH_ALLOWED_ORIGINS: "*"
      MERCURE_CORS_ALLOWED_ORIGINS: "*"
      MERCURE_ANONYMOUS: 1
      MERCURE_DEBUG: 1
    volumes:
      - ./backend/config/Caddyfile:/etc/caddy/Caddyfile:ro
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  db_data:
